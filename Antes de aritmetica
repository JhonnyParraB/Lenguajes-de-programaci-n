grammar Simple;
@parser::header {
	import java.util.Map;
	import java.util.HashMap;
}

@parser::members {
	Map<String, Object> symbolTable = new HashMap<String, Object>();
}
function: FUNCTION ID BRACKET_OPEN
		sentence*
 BRACKET_CLOSE;
		
sentence: var_decl | var_assign | println;

var_decl: DECLARE ID SEMICOLON
		{symbolTable.put($ID.text, 0);};
var_assign: ID ASSIGN expression SEMICOLON
		{symbolTable.put($ID.text, $expression.value);};
println: PRINTLN expression SEMICOLON
		{System.out.println($expression.value);};
		
expression returns [Object value]:
 NUMBER {$value = Integer.parseInt($NUMBER.text);}
 |
 ID {$value = symbolTable.get($ID.text);};

 
 

 

FUNCTION: 'function';
DECLARE: 'declare';

PRINTLN: 'println';
PRINT: 'print';
READ: 'read';

WHILE: 'while';
IF: 'if';
ELSE: 'else';

PLUS: '+';
MINUS: '-';
MULT: '*';
DIV: '/';
POW: '^';

AND: 'and';
OR: 'or';
NOT: 'not';

GT: '>';
LT: '<';
GEQ: '>=';
LEQ: '<=';
EQ: '==';
NEQ: '<>';


ASSIGN: '=';

BRACKET_OPEN: '{';
BRACKET_CLOSE: '}';

PAR_OPEN: '(';
PAR_CLOSE: ')';

SEMICOLON: ';';

BOOLEAN: 'true' | 'false';

QUOTATION_MARKS: '"';

ID: [a-zA-Z_][a-zA-Z0-9]*;
NUMBER: [0-9]+;
STRING: ["][^"]["];
WSA
:
	[ \t\r\n]+ -> skip
;
