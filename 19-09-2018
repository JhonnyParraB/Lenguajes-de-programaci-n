grammar Simple;
@parser::header {
import java.util.Map;
import java.util.HashMap;
}

@parser::members {
Map<String, Object> symbolTable = new HashMap<String, Object>();
}
function: FUNCTION ID BRACKET_OPEN
sentence*
BRACKET_CLOSE;

sentence returns [ASTNode node]: println | conditional;


println returns [ASTNode node]: PRINTLN expression SEMICOLON
			{$node = new Println($expression.node)};
			
conditional returns [ASTNode node]: IF PAR_OPEN expression PAR_CLOSE
			{
				List<ASTNode> body = new ArraList<ASTNode>();
			}
			 BRACKET_OPEN sentence* (s1=sentence {body.add($s1.node);})* BRACKET_CLOSE
			 ELSE
			 {
				List<ASTNode> elseBody = new ArraList<ASTNode>();
			 }
			 BRACKET_OPEN sentence* (s2=sentence {elseBody.add($s2.node);})* BRACKET_CLOSE;
			 {
			 	$node = new If ($expression.node, body, elseBody);
			 };

print returns [ASTNode node]: PRINT term SEMICOLON
			{}
	   |PRINT expression SEMICOLON
			{};

expression returns [ASTNode node]:
	t1=factor {}
	(PLUS t2=factor {}
		| MINUS t2=factor {}
	)*;
	
factor returns [ASTNode node]: t1=term {} 
	(MULT t2=term {}
		| DIV t2=term {}
	)*;

term returns [ASTNode node]:
	NUMBER {}
	| ID {}
	| BOOLEAN {}
	| PAR_OPEN expression {} PAR_CLOSE
	| STRING {};






FUNCTION: 'function';
DECLARE: 'declare';

PRINTLN: 'println';
PRINT: 'print';

READ: 'read';

WHILE: 'while';
IF: 'if';
ELSE: 'else';

PLUS: '+';
MINUS: '-';
MULT: '*';
DIV: '/';
POW: '^';

AND: 'and';
OR: 'or';
NOT: 'not';

GT: '>';
LT: '<';
GEQ: '>=';
LEQ: '<=';
EQ: '==';
NEQ: '<>';


ASSIGN: '=';

BRACKET_OPEN: '{';
BRACKET_CLOSE: '}';

PAR_OPEN: '(';
PAR_CLOSE: ')';

SEMICOLON: ';';

BOOLEAN: 'true' | 'false';

ID: [a-zA-Z_][a-zA-Z0-9]*;
NUMBER: ([0-9]*[.])?[0-9]+;
STRING: '"' ~('\r' | '\n' | '"')* '"';
WSA
:
[ \t\r\n]+ -> skip
;
